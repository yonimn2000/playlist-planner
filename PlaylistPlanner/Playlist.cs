using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace YonatanMankovich.PlaylistPlanner
{
    public class Playlist
    {
        public TimeSpan Duration { get; private set; }
        private Queue<MusicFile> MusicFiles { get; set; } = new Queue<MusicFile>();

        public void EnqueueMusicFile(MusicFile musicFile)
        {
            MusicFiles.Enqueue(musicFile);
            Duration += musicFile.Duration;
        }

        public MusicFile DequeueMusicFile()
        {
            if (MusicFiles.Count > 0)
            {
                MusicFile musicFile = MusicFiles.Dequeue();
                Duration -= musicFile.Duration;
                return new MusicFile(musicFile);
            }
            throw new PlaylistEmptyException();
        }

        public int Size => MusicFiles.Count;

        public IEnumerable<MusicFile> GetMusicFiles()
        {
            foreach (MusicFile musicFile in MusicFiles)
                yield return musicFile;
        }

        public void Save(string path, bool isRelative)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("#EXTM3U");
            sb.AppendLine($"#EXTINF:{Math.Round(Duration.TotalSeconds)},Generated by PlaylistPlanner by Yonatan Mankovich");
            foreach (MusicFile musicFile in MusicFiles)
                sb.AppendLine(isRelative ? Path.GetFileName(musicFile.Path) : musicFile.Path);
            File.WriteAllText(path, sb.ToString());
        }

        public void Play()
        {
            string fileName = "Playlist.m3u";
            Save(fileName, false);
            System.Diagnostics.Process.Start(fileName);
        }

        public void Shuffle() => MusicFiles = new Queue<MusicFile>(MusicFiles.OrderBy(f => new Guid()));
    }
}